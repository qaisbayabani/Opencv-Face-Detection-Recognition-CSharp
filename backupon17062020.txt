using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using OpenCvSharp;
using System.Drawing;
using OpenCvSharp.Extensions;
using System.Threading;
using Point = OpenCvSharp.Point;
using OpenCvSharp.Face;

using System.IO;

namespace Try
{

    class Program
    {
        //static VideoCapture cap = new VideoCapture("rtsp://192.168.0.5:8554/profile1",
        //  VideoCaptureAPIs.FFMPEG);

        static VideoCapture cap = new VideoCapture(0, VideoCaptureAPIs.DSHOW);
        //"rtsp://192.168.10.3:8554/profile0"

        //static VideoCapture cap = new VideoCapture("rtsp://192.168.66.1:8554/profile0");

        static CascadeClassifier haarCascade = 
            new CascadeClassifier("haarcascade_frontalface_default.xml");
        static Rect[] faces;
        static Mat src = new Mat();
        static Mat gray = new Mat();
        private static int sleepTime = 0;// (int)Math.Round(1000 / cap.Fps);

        private static EigenFaceRecognizer recognizer;
        private static List<Mat> TrainedFaces = new List<Mat>();
        private static List<int> PersonsLabes = new List<int>();
        private static List<string> PersonsNames = new List<string>();
        //private static Array<Mat> pangay = new List<Mat>();
        private static string sst = "Hello";
        private static OpenCvSharp.Size si = new OpenCvSharp.Size(200, 200);

        public static void Main()
        {
            Ok1 ok1 = new Ok1();

            Thread ti = new Thread(new ThreadStart(() => ok1.Ok()));
            ti.Start();

            
        }

        class Ok1 
        {

            public void Ok()
            {

                PersonsNames.Clear();
                PersonsNames.Add("Press T to find");

                while (true)
                {
                    TrainedFaces.Clear();
                    PersonsLabes.Clear();

                    cap.Read(src);
                    //cap.Retrieve(src);
                    //src = cap.RetrieveMat();
                    Cv2.PyrDown(src, src);

                    //                recognizer = new EigenFaceRecognizer();
                    if (!src.Empty())
                    {
                        sleepTime = (int)Math.Round(1000 / cap.Fps);

                        Cv2.WaitKey(1);

                        //src = src.Flip(FlipMode.Y);

                        //result = src.Clone();

                        Cv2.CvtColor(src, gray, ColorConversionCodes.BGR2GRAY);
                        /*
                        if (Console.KeyAvailable)
                        {
                            if (Console.ReadKey().Key == ConsoleKey.X)
                            {

                                faces = haarCascade.DetectMultiScale(
                        gray, 1.1, 3, HaarDetectionType.ScaleImage);

                                goto Found;      
                            }
                            
                        }

                        */

                        Window win = new Window("Croppic", WindowMode.KeepRatio);

                        Window win2 = new Window("Main", WindowMode.KeepRatio);

                        faces = haarCascade.DetectMultiScale(
                  gray, 1.1, 3, HaarDetectionType.ScaleImage);

                        if (faces!=null)
                        foreach (var face in faces)
                        {


                            Point p = new Point(face.Left, face.Top);
                            Point pp = new Point(face.Right, face.Bottom);
                            src.Rectangle(p, pp, new Scalar(220, 100, 255), 1);
                            //src.DrawMarker(p, new Scalar(20, 2, 100), MarkerTypes.Cross, 250, 1);
                            //byte[] b=src.ImEncode("1.png");
                            gray = src.SubMat(face.Top, face.Bottom, face.Left, face.Right);
                                Cv2.CvtColor(gray, gray, ColorConversionCodes.BGR2GRAY);

                                Cv2.Resize(gray, gray, si);


                            while (Console.KeyAvailable)
                            {
                                if (Console.ReadKey().Key == ConsoleKey.E)
                                {

                                    Console.WriteLine("Please enter the name========>");

                                    string name = Console.ReadLine();
                                    
                                    gray.SaveImage(name+".png");

                                    //win.ShowImage(gray);

                                }

                                if (Console.ReadKey().Key == ConsoleKey.T)
                                {

                                    int ImagesCount = 0;
                                    string path = Directory.GetCurrentDirectory();
                                    string[] files = Directory.GetFiles(path, "*.png", SearchOption.AllDirectories);

                                    foreach (var file in files)
                                    {

                                        Mat m = new Mat(file, ImreadModes.Grayscale);

                                        //Cv2.Resize(gray, m, si);

                                        string excl = file.Substring(69, 4);

                                        TrainedFaces.Add(m);

                                        PersonsLabes.Add(ImagesCount);

                                        PersonsNames.Add(excl);

                                        sst = excl;

                                        ImagesCount++;

                                    }

                                    Console.WriteLine(ImagesCount + "======Images in Database");

                                    recognizer = EigenFaceRecognizer.Create(ImagesCount, 2000);

                                    if (TrainedFaces[0] != null)
                                    {


                                        recognizer.Train(TrainedFaces.ToArray(), PersonsLabes.ToArray());

                                        int x = recognizer.Predict(gray);////////////////////////////////

                                        if (x > 0)
                                        {
                                            //   Thread.Sleep(2000);
                                            Console.WriteLine("Found==========" + PersonsNames[x]);

                                            sst = PersonsNames[x];


                                        }

                                        else
                                        {

                                            Console.WriteLine("Not Found");

                                        }

                                    }




                                }//end of if Key




                            }//end of while key available


                            Cv2.PutText(src, sst, face.TopLeft, HersheyFonts.HersheyTriplex, 1, new Scalar(100, 200, 60), 1);

                            //gray = gray.SubMat(face.Top, face.Bottom, face.Left, face.Right);
                        }//end of foreach face

                        win2.ShowImage(src);

                        win.ShowImage(gray);
                    }
                }

            }

        }
    }
}

