using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using OpenCvSharp;
using System.Drawing;
using OpenCvSharp.Extensions;
using System.Threading;
using Point = OpenCvSharp.Point;
using OpenCvSharp.Face;

using System.IO;

namespace Try
{

    class Program
    {
        //static VideoCapture cap = new VideoCapture("rtsp://192.168.0.5:8554/profile1",
        //  VideoCaptureAPIs.FFMPEG);

        static VideoCapture cap = new VideoCapture(0, VideoCaptureAPIs.DSHOW);
        //"rtsp://192.168.10.3:8554/profile0"

        //static VideoCapture cap = new VideoCapture("rtsp://192.168.66.1:8554/profile0");

        static CascadeClassifier haarCascade =
            new CascadeClassifier("haarcascade_frontalface_default.xml");
        static Rect[] faces;
        static Mat src = new Mat();
        static Mat gray = new Mat();
        private static int sleepTime = 0;// (int)Math.Round(1000 / cap.Fps);

        private static EigenFaceRecognizer recognizer;
        private static List<Mat> TrainedFaces = new List<Mat>();
        private static List<int> PersonsLabes = new List<int>();
        private static List<string> PersonsNames = new List<string>();
        //private static Array<Mat> pangay = new List<Mat>();
        private static string sst = "Hello";
        private static OpenCvSharp.Size si = new OpenCvSharp.Size(200, 200);
        private static Rect face2;
        public static void Main()
        {
            Ok1 ok1 = new Ok1();

            Thread ti = new Thread(new ThreadStart(() => ok1.Ok()));
            ti.Start();


        }

        class Ok1
        {

            public void Ok()
            {

                PersonsNames.Clear();
                PersonsNames.Add("Press T to find");

                while (true)
                {
                    TrainedFaces.Clear();
                    PersonsLabes.Clear();
                    cap.Read(src);
                   
                    Window win3 = new Window("Croppic", WindowMode.KeepRatio);

                    Window win4 = new Window("Main", WindowMode.KeepRatio);
                    
                    if (!src.Empty())
                    {
                        sleepTime = (int)Math.Round(1000 / cap.Fps);

                        Cv2.WaitKey(1);

                        //Cv2.CvtColor(src, gray, ColorConversionCodes.BGR2GRAY);

                        if (Console.KeyAvailable)
                        {
                            if (Console.ReadKey().Key == ConsoleKey.X)
                            {

                                Func1 func = new Func1();

                                Thread ti = new Thread(new ThreadStart(() => func.func1()));
                                ti.Start();

                                //func1();                        
                                                    
                            
                            }///if key is x                            


                            if (Console.ReadKey().Key == ConsoleKey.S) {



                                func2();



                            }



                            }///console key pressed



                        }///while not src empty

                    Cv2.PutText(src, sst, face2.TopLeft, HersheyFonts.HersheyTriplex, 1, new Scalar(100, 200, 60), 1);

                   win3.ShowImage(src);

                    if (!gray.Empty()) {
                        
                        win4.ShowImage(gray);
                    }
                    }//while true

                }///public void ok




            class Func1 {
                public void func1() {
                    Cv2.CvtColor(src, gray, ColorConversionCodes.BGR2GRAY);
                    faces = haarCascade.DetectMultiScale(
                          gray, 1.1, 3, HaarDetectionType.ScaleImage);

                    if (faces != null)
                        foreach (var face in faces)
                        {

                            Point p = new Point(face.Left, face.Top);
                            Point pp = new Point(face.Right, face.Bottom);
                            src.Rectangle(p, pp, new Scalar(220, 100, 255), 1);
                            //src.DrawMarker(p, new Scalar(20, 2, 100), MarkerTypes.Cross, 250, 1);
                            //byte[] b=src.ImEncode("1.png");
                            gray = src.SubMat(face.Top, face.Bottom, face.Left, face.Right);
                            Cv2.CvtColor(gray, gray, ColorConversionCodes.BGR2GRAY);

                            Cv2.Resize(gray, gray, si);
                            int ImagesCount = 0;

                            string path = Directory.GetCurrentDirectory();
                            string[] files = Directory.GetFiles(path, "*.png", SearchOption.AllDirectories);

                            foreach (var file in files)
                            {

                                Mat m = new Mat(file, ImreadModes.Grayscale);

                                //Cv2.Resize(gray, m, si);

                                string excl = file.Substring(69, 4);

                                TrainedFaces.Add(m);

                                PersonsLabes.Add(ImagesCount);

                                PersonsNames.Add(excl);

                                sst = excl;

                                ImagesCount++;

                            }

                            Console.WriteLine(ImagesCount + "======Images in Database");

                            recognizer = EigenFaceRecognizer.Create(ImagesCount, 2000);

                            if (TrainedFaces[0] != null)
                            {


                                recognizer.Train(TrainedFaces.ToArray(), PersonsLabes.ToArray());

                                int x = recognizer.Predict(gray);////////////////////////////////

                                if (x > 0)
                                {
                                    //   Thread.Sleep(2000);
                                    Console.WriteLine("Found==========" + PersonsNames[x]);

                                    sst = PersonsNames[x];


                                }

                                else
                                {

                                    Console.WriteLine("Not Found");

                                }

                            }////if trained faces !=null

                            face2 = face;

                        }///var face in faces



                }
            }

            static void func2() {
                Cv2.CvtColor(src, gray, ColorConversionCodes.BGR2GRAY);
                faces = haarCascade.DetectMultiScale(
                      gray, 1.1, 3, HaarDetectionType.ScaleImage);

                if (faces != null)
                    foreach (var face in faces)
                    {

                        Point p = new Point(face.Left, face.Top);
                        Point pp = new Point(face.Right, face.Bottom);
                        src.Rectangle(p, pp, new Scalar(220, 100, 255), 1);
                        //src.DrawMarker(p, new Scalar(20, 2, 100), MarkerTypes.Cross, 250, 1);
                        //byte[] b=src.ImEncode("1.png");
                        gray = src.SubMat(face.Top, face.Bottom, face.Left, face.Right);
                        Cv2.CvtColor(gray, gray, ColorConversionCodes.BGR2GRAY);

                        Cv2.Resize(gray, gray, si);

                        Console.WriteLine("Please enter the name========>");

                        string name = Console.ReadLine();

                        gray.SaveImage(name + ".png");

                    }



            }



        }///class ok1




    }///class program
    }//namespace try


